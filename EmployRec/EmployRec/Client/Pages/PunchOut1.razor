@page "/punchOut/1/{id:int}"
@inject IEmployeeService EmployeeService
@inject IJSRuntime JSRuntime
@using EmployRec.Shared


<h3>PunchOut</h3>

<div style="text-align: center;">
    <div id="reader" style="width: 500px; margin:auto 0;"></div>
    <div id="show" style="display: none;">
        <h1>打卡下班紀錄</h1>
        <p style="color: blue; " id="result"></p>
    </div>
</div>
<br />

<div style="display: @displayStyle">
    <br />
    <div>
        <h2>姓名   @inputValue</h2>
    </div>
    <br />
    <div>
        <h2>員工編號   @punc1.PunchId</h2>
    </div>
    <br />
    <div>
        <h2>日期  @punc1.Time</h2>
    </div>

    <br />
</div>

@*<button class="btn btn-primary" @onclick="GetInputValue">顯示</button>*@
<button class="btn btn-primary" @onclick="HandleSubmit">打卡下班</button>
<div style="height:400px; width:1200px; display: @displayShow;" @onmousemove="GetInputValue"></div>


@code {
    [Parameter]
    public int? Id { get; set; }

    Puns1 punc1 = new Puns1 { };

    protected override async Task OnInitializedAsync()
    {
        await EmployeeService.GetPunch1();
    }

    protected override async Task OnParametersSetAsync()
    {

        punc1.Name = EmployeeService.Ps1[0].Name;
        punc1.PunchId = EmployeeService.Ps1[0].PunchId;
        punc1.Time = DateTime.Now.ToString("yyyy/MM/dd");

    }

    async Task HandleSubmit()
    {

        foreach (var i in EmployeeService.Ps1)
        {
            //Console.WriteLine(i.Id+"  -> Id");
            if (i.Id == Id)
            {
                punc1.PunchIn = i.PunchIn;
                punc1.Time = i.Time;
            }
        }
        punc1.PunchId = EmployeeService.Ps1[0].PunchId;
        punc1.PunchOut = DateTime.Now;
        punc1.Id = (int) Id;
        var dif = EmployeeService.DateDiff(punc1.PunchIn, punc1.PunchOut);
        punc1.Hours = dif;


        Console.WriteLine(punc1.Id);
        Console.WriteLine(punc1.PunchId);
        Console.WriteLine(punc1.Name);
        Console.WriteLine(punc1.Time);
        Console.WriteLine(punc1.PunchIn);
        Console.WriteLine(punc1.PunchOut);
        Console.WriteLine(punc1.Hours);

        await EmployeeService.UpdatePunch1(punc1);

    }

    private IJSObjectReference? module;
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("loadQrScript");
            JSRuntime.InvokeVoidAsync("startQrScanner");

        }
    }


    private string inputValue { get; set; }
    private string displayStyle = "none";
    private string displayShow = "block";

    private async Task GetInputValue()
    {
        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/PunchIn1.razor.js");
        // 使用 IJSRuntime 呼叫 JavaScript 函數
        inputValue = await module.InvokeAsync<string>("GetValue");
        Console.WriteLine(inputValue);
        StateHasChanged(); // 更新組件的狀態，以便刷新顯示的值
        displayStyle = "block";
        displayShow = "none";

    }


}
